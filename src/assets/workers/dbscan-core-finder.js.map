{"version":3,"file":"./src/assets/workers/dbscan-core-finder.js","mappings":"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","sources":["webpack://free-space/./src/utils/point-distance.ts","webpack://free-space/./src/utils/sphere-contains.ts","webpack://free-space/./src/utils/get-random-point.ts","webpack://free-space/./src/utils/add-simple-points.ts","webpack://free-space/./src/utils/multiply-simple-point.ts","webpack://free-space/./src/utils/get-neighbors.ts","webpack://free-space/./src/utils/cube-overlaps-sphere.ts","webpack://free-space/./src/utils/points-equal.ts","webpack://free-space/./node_modules/ramda/es/internal/_isPlaceholder.js","webpack://free-space/./node_modules/ramda/es/internal/_curry1.js","webpack://free-space/./node_modules/ramda/es/internal/_curry2.js","webpack://free-space/./node_modules/d3-octree/src/add.js","webpack://free-space/./node_modules/d3-octree/src/octant.js","webpack://free-space/./node_modules/d3-octree/src/x.js","webpack://free-space/./node_modules/d3-octree/src/y.js","webpack://free-space/./node_modules/d3-octree/src/z.js","webpack://free-space/./node_modules/d3-octree/src/octree.js","webpack://free-space/./node_modules/ramda/es/pick.js","webpack://free-space/./src/utils/serialize-tree.ts","webpack://free-space/./node_modules/d3-octree/src/cover.js","webpack://free-space/./node_modules/d3-octree/src/data.js","webpack://free-space/./node_modules/d3-octree/src/extent.js","webpack://free-space/./node_modules/d3-octree/src/find.js","webpack://free-space/./node_modules/d3-octree/src/remove.js","webpack://free-space/./node_modules/d3-octree/src/root.js","webpack://free-space/./node_modules/d3-octree/src/size.js","webpack://free-space/./node_modules/d3-octree/src/visit.js","webpack://free-space/./node_modules/d3-octree/src/visitAfter.js","webpack://free-space/./node_modules/ramda/es/internal/_isInteger.js","webpack://free-space/./node_modules/ramda/es/prop.js","webpack://free-space/./node_modules/ramda/es/internal/_prop.js","webpack://free-space/./node_modules/ramda/es/internal/_nth.js","webpack://free-space/./src/utils/deserialize-tree.ts","webpack://free-space/./src/worker/dbscan-core-finder.worker.ts","webpack://free-space/./src/utils/db-scan/find-core-points.ts"],"sourcesContent":["import {SimplePoint} from 'types'\n\nconst sqrt = Math.sqrt\nconst pow2 = (num: number) => num * num\n\nexport const pointDistance = (p1: SimplePoint, p2: SimplePoint) =>\n  sqrt(pow2(p1.x - p2.x) + pow2(p1.y - p2.y) + pow2(p1.z - p2.z))\n","import {\n  SimplePoint,\n  Sphere,\n} from 'types'\nimport {pointDistance} from './point-distance'\n\nexport const sphereContains = (s: Sphere, coord: SimplePoint) => pointDistance(s.coord, coord) <= s.r\n","import {\n  Point,\n  Space3d,\n} from 'types'\nimport {createPoint} from './create-point'\n\nconst random = Math.random\nconst floor = Math.floor\n\nexport const getRandomPoint = (space: Space3d): Point => {\n  const ranX = floor(random() * space.lenx)\n  const ranY = floor(random() * space.leny)\n  const ranZ = floor(random() * space.lenz)\n\n  return createPoint(ranX, ranY, ranZ)\n}\n","import {SimplePoint} from 'types'\n\nexport const addSimplePoints = (p1: SimplePoint, p2: SimplePoint): SimplePoint => {\n  return {\n    x: p1.x + p2.x,\n    y: p1.y + p2.y,\n    z: p1.z + p2.z,\n  }\n}\n","import {SimplePoint} from 'types'\n\nexport const multiplySimplePoint = (n: number, p: SimplePoint): SimplePoint =>\n  ({x: p.x * n, y: p.y * n, z: p.z * n})\n","import {\n  Octree,\n  OctreeInternalNode,\n  OctreeLeaf,\n} from 'd3-octree'\nimport {\n  Point,\n  SimplePoint,\n  Udf,\n} from 'types'\nimport {cubeOverlapsSphere} from './cube-overlaps-sphere'\nimport {pointsEqual} from './points-equal'\nimport {sphereContains} from './sphere-contains'\n\ntype Args = {\n  eps: number;\n  point: SimplePoint;\n  tree: Octree<Point>;\n}\n\nconst isLeaf = (node: OctreeInternalNode<Point> | OctreeLeaf<Point>): node is OctreeLeaf<Point> => !node.length\n\nexport const getNeighbors = ({tree, eps, point}: Args): Point[] => {\n  const result: Point[] = []\n\n  tree.visit((node, x0, y0, z0, x1, y1, z1) => {\n    if (!cubeOverlapsSphere(\n      {x: x0, y: y0, z: z0},\n      {x: x1, y: y1, z: z1},\n      eps,\n      point,\n    )) return true\n\n    if (isLeaf(node)) {\n      let testPoint: Udf<Point> = node.data\n      // noinspection JSAssignmentUsedAsCondition\n      do if (\n        !pointsEqual(testPoint, point) &&\n        sphereContains({coord: point, r: eps}, testPoint)\n      ) result.push(testPoint)\n      // tslint:disable-next-line:no-conditional-assignment\n      while (testPoint = node.next && node.next.data)\n    }\n  })\n\n  return result\n}\n","import {\n  Dict,\n  Dimension,\n  SimplePoint,\n} from 'types'\nimport {addSimplePoints} from './add-simple-points'\nimport {multiplySimplePoint} from './multiply-simple-point'\nimport {sphereContains} from './sphere-contains'\n\nexport const cubeOverlapsSphere = (lower: SimplePoint, upper: SimplePoint, r: number, c: SimplePoint) => {\n  const half = 0.5\n  const cubeHalf = (upper.x - lower.x) * half\n  const cubeCenter = multiplySimplePoint(half, addSimplePoints(lower, upper))\n  const cubeCenterMinus = multiplySimplePoint(-1, cubeCenter)\n\n  // Go to coordinate system in the center of cube\n  const cSphere = addSimplePoints(c, cubeCenterMinus)\n\n  const dimensions: Dimension[] = ['x', 'y', 'z']\n  const otherDimensions: Dict<Dimension[]> = {\n    x: ['y', 'z'],\n    y: ['x', 'z'],\n    z: ['x', 'y'],\n  }\n\n  const condition1 = dimensions.some(\n    dimension =>\n      (cSphere[dimension] >= -cubeHalf - r) &&\n      (cSphere[dimension] <= cubeHalf + r) &&\n      otherDimensions[dimension].every(otherD => (cSphere[otherD] >= -cubeHalf) && (cSphere[otherD] <= cubeHalf)),\n  )\n\n  const cubeVertexes: SimplePoint[] = [\n    {x: cubeHalf, y: cubeHalf, z: cubeHalf},\n    {x: cubeHalf, y: cubeHalf, z: -cubeHalf},\n    {x: cubeHalf, y: -cubeHalf, z: cubeHalf},\n    {x: -cubeHalf, y: cubeHalf, z: cubeHalf},\n    {x: -cubeHalf, y: -cubeHalf, z: cubeHalf},\n    {x: cubeHalf, y: -cubeHalf, z: -cubeHalf},\n    {x: -cubeHalf, y: cubeHalf, z: -cubeHalf},\n    {x: -cubeHalf, y: -cubeHalf, z: -cubeHalf},\n  ]\n\n  const condition2 = cubeVertexes.some(s => sphereContains({coord: cSphere, r}, s))\n\n  return condition1 || condition2\n}\n","import {SimplePoint} from 'types'\n\nexport const pointsEqual = (p1: SimplePoint, p2: SimplePoint) =>\n  (p1.x === p2.x) && (p1.y === p2.y) && (p1.z === p2.z)\n","export default function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from \"./_curry1.js\";\nimport _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","export default function(d) {\n  var x = +this._x.call(null, d),\n      y = +this._y.call(null, d),\n      z = +this._z.call(null, d);\n  return add(this.cover(x, y, z), x, y, z, d);\n}\n\nfunction add(tree, x, y, z, d) {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      z0 = tree._z0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      z1 = tree._z1,\n      xm,\n      ym,\n      zm,\n      xp,\n      yp,\n      zp,\n      right,\n      bottom,\n      deep,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n    if (parent = node, !(node = node[i = deep << 2 | bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  zp = +tree._z.call(null, node.data);\n  if (x === xp && y === yp && z === zp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(8) : tree._root = new Array(8);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n  } while ((i = deep << 2 | bottom << 1 | right) === (j = (zp >= zm) << 2 | (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      z,\n      xz = new Array(n),\n      yz = new Array(n),\n      zz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      z0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity,\n      z1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    zz[i] = z;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n    if (z < z0) z0 = z;\n    if (z > z1) z1 = z;\n  }\n\n  // If there were no (valid) points, inherit the existing extent.\n  if (x1 < x0) x0 = this._x0, x1 = this._x1;\n  if (y1 < y0) y0 = this._y0, y1 = this._y1;\n  if (z1 < z0) z0 = this._z0, z1 = this._z1;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0, z0).cover(x1, y1, z1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], zz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(node, x0, y0, z0, x1, y1, z1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.z0 = z0;\n  this.x1 = x1;\n  this.y1 = y1;\n  this.z1 = z1;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n","export function defaultZ(d) {\n  return d[2];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._z = _, this) : this._z;\n}\n","import tree_add, {addAll as tree_addAll} from \"./add\";\nimport tree_cover from \"./cover\";\nimport tree_data from \"./data\";\nimport tree_extent from \"./extent\";\nimport tree_find from \"./find\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove\";\nimport tree_root from \"./root\";\nimport tree_size from \"./size\";\nimport tree_visit from \"./visit\";\nimport tree_visitAfter from \"./visitAfter\";\nimport tree_x, {defaultX} from \"./x\";\nimport tree_y, {defaultY} from \"./y\";\nimport tree_z, {defaultZ} from \"./z\";\n\nexport default function octree(nodes, x, y, z) {\n  var tree = new Octree(x == null ? defaultX : x, y == null ? defaultY : y, z == null ? defaultZ : z, NaN, NaN, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Octree(x, y, z, x0, y0, z0, x1, y1, z1) {\n  this._x = x;\n  this._y = y;\n  this._z = z;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = octree.prototype = Octree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(8)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 8; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(8)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\ntreeProto.z = tree_z;\n","import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.omit, R.props\n * @example\n *\n *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */\nvar pick = /*#__PURE__*/_curry2(function pick(names, obj) {\n  var result = {};\n  var idx = 0;\n  while (idx < names.length) {\n    if (names[idx] in obj) {\n      result[names[idx]] = obj[names[idx]];\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default pick;","import {Octree} from 'd3-octree'\nimport Rpick from 'ramda/es/pick'\nimport {\n  Point,\n  SerializedTree,\n} from 'types'\n\nexport const serializeTree: (tree: Octree<Point>) => SerializedTree =\n  Rpick(['_x0', '_y0', '_z0', '_x1', '_y1', '_z1', '_root'])\n","export default function(x, y, z) {\n  if (isNaN(x = +x) || isNaN(y = +y) || isNaN(z = +z)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1;\n\n  // If the octree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing octant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n    z1 = (z0 = Math.floor(z)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else if (x0 > x || x > x1 || y0 > y || y > y1 || z0 > z || z > z1) {\n    var t = x1 - x0,\n        node = this._root,\n        parent,\n        i;\n\n    switch (i = (z < (z0 + z1) / 2) << 2 | (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n      case 0: {\n        do parent = new Array(8), parent[i] = node, node = parent;\n        while (t *= 2, x1 = x0 + t, y1 = y0 + t, z1 = z0 + t, x > x1 || y > y1 || z > z1);\n        break;\n      }\n      case 1: {\n        do parent = new Array(8), parent[i] = node, node = parent;\n        while (t *= 2, x0 = x1 - t, y1 = y0 + t, z1 = z0 + t, x0 > x || y > y1 || z > z1);\n        break;\n      }\n      case 2: {\n        do parent = new Array(8), parent[i] = node, node = parent;\n        while (t *= 2, x1 = x0 + t, y0 = y1 - t, z1 = z0 + t, x > x1 || y0 > y || z > z1);\n        break;\n      }\n      case 3: {\n        do parent = new Array(8), parent[i] = node, node = parent;\n        while (t *= 2, x0 = x1 - t, y0 = y1 - t, z1 = z0 + t, x0 > x || y0 > y || z > z1);\n        break;\n      }\n      case 4: {\n        do parent = new Array(8), parent[i] = node, node = parent;\n        while (t *= 2, x1 = x0 + t, y1 = y0 + t, z0 = z1 - t, x > x1 || y > y1 || z0 > z);\n        break;\n      }\n      case 5: {\n        do parent = new Array(8), parent[i] = node, node = parent;\n        while (t *= 2, x0 = x1 - t, y1 = y0 + t, z0 = z1 - t, x0 > x || y > y1 || z0 > z);\n        break;\n      }\n      case 6: {\n        do parent = new Array(8), parent[i] = node, node = parent;\n        while (t *= 2, x1 = x0 + t, y0 = y1 - t, z0 = z1 - t, x > x1 || y0 > y || z0 > z);\n        break;\n      }\n      case 7: {\n        do parent = new Array(8), parent[i] = node, node = parent;\n        while (t *= 2, x0 = x1 - t, y0 = y1 - t, z0 = z1 - t, x0 > x || y0 > y || z0 > z);\n        break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  // If the octree covers the point already, just return.\n  else return this;\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  return this;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1], +_[0][2]).cover(+_[1][0], +_[1][1], +_[1][2])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0, this._z0], [this._x1, this._y1, this._z1]];\n}\n","import Octant from \"./octant\";\n\nexport default function(x, y, z, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1,\n      y1,\n      z1,\n      x2,\n      y2,\n      z2,\n      x3 = this._x1,\n      y3 = this._y1,\n      z3 = this._z1,\n      octs = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) octs.push(new Octant(node, x0, y0, z0, x3, y3, z3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius, z0 = z - radius;\n    x3 = x + radius, y3 = y + radius, z3 = z + radius;\n    radius *= radius;\n  }\n\n  while (q = octs.pop()) {\n\n    // Stop searching if this octant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (z1 = q.z0) > z3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0\n        || (z2 = q.z1) < z0) continue;\n\n    // Bisect the current octant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2,\n          zm = (z1 + z2) / 2;\n\n      octs.push(\n        new Octant(node[7], xm, ym, zm, x2, y2, z2),\n        new Octant(node[6], x1, ym, zm, xm, y2, z2),\n        new Octant(node[5], xm, y1, zm, x2, ym, z2),\n        new Octant(node[4], x1, y1, zm, xm, ym, z2),\n        new Octant(node[3], xm, ym, z1, x2, y2, zm),\n        new Octant(node[2], x1, ym, z1, xm, y2, zm),\n        new Octant(node[1], xm, y1, z1, x2, ym, zm),\n        new Octant(node[0], x1, y1, z1, xm, ym, zm)\n      );\n\n      // Visit the closest octant first.\n      if (i = (z >= zm) << 2 | (y >= ym) << 1 | (x >= xm)) {\n        q = octs[octs.length - 1];\n        octs[octs.length - 1] = octs[octs.length - 1 - i];\n        octs[octs.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          dz = z - +this._z.call(null, node.data),\n          d2 = dx * dx + dy * dy + dz * dz;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d, z0 = z - d;\n        x3 = x + d, y3 = y + d, z3 = z + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1,\n      x,\n      y,\n      z,\n      xm,\n      ym,\n      zm,\n      right,\n      bottom,\n      deep,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n    if (!(parent = node, node = node[i = deep << 2 | bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 7] || parent[(i + 2) & 7] || parent[(i + 3) & 7] || parent[(i + 4) & 7] || parent[(i + 5) & 7] || parent[(i + 6) & 7] || parent[(i + 7) & 7]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3] || parent[4] || parent[5] || parent[6] || parent[7])\n      && node === (parent[7] || parent[6] || parent[5] || parent[4] || parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Octant from \"./octant\";\n\nexport default function(callback) {\n  var octs = [], q, node = this._root, child, x0, y0, z0, x1, y1, z1;\n  if (node) octs.push(new Octant(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n  while (q = octs.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;\n      if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));\n      if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));\n      if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));\n      if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));\n      if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));\n      if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));\n      if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));\n      if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));\n    }\n  }\n  return this;\n}\n","import Octant from \"./octant\";\n\nexport default function(callback) {\n  var octs = [], next = [], q;\n  if (this._root) octs.push(new Octant(this._root, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n  while (q = octs.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;\n      if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));\n      if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));\n      if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));\n      if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));\n      if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));\n      if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));\n      if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));\n      if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.z0, q.x1, q.y1, q.z1);\n  }\n  return this;\n}\n","/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nexport default Number.isInteger || function _isInteger(n) {\n  return n << 0 === n;\n};","import _curry2 from \"./internal/_curry2.js\";\nimport _prop from \"./internal/_prop.js\";\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx -> {s: a} -> a | Undefined\n * @param {String|Number} p The property name or array index\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path, R.props, R.pluck, R.project, R.nth\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n *      R.prop(0, [100]); //=> 100\n *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4\n */\n\nvar prop = /*#__PURE__*/_curry2(_prop);\nexport default prop;","import _isInteger from \"./_isInteger.js\";\nimport _nth from \"./_nth.js\";\nfunction _prop(p, obj) {\n  if (obj == null) {\n    return;\n  }\n  return _isInteger(p) ? _nth(p, obj) : obj[p];\n}\nexport default _prop;","export default function _nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return list[idx];\n}","import {\n  Octree,\n  octree,\n} from 'd3-octree'\nimport Rprop from 'ramda/es/prop'\nimport {\n  Point,\n  SerializedTree,\n} from 'types'\n\nexport const deserializeTree = (data: SerializedTree): Octree<Point> => {\n  const tree = octree<Point>([], Rprop('x'), Rprop('y'), Rprop('z'))\n\n  Object.assign(tree, data)\n\n  return tree\n}\n","import {\n  Point,\n  SerializedTree,\n} from 'types'\nimport {\n  deserializeTree,\n  findCorePoints,\n} from 'utils'\n\ntype Args = {\n  tree: SerializedTree;\n  points: Point[];\n  eps: number;\n  minPoints: number;\n}\n\nself.onmessage = ({data}: {data: Args}) => {\n  postMessage(\n    findCorePoints({\n      eps: data.eps,\n      minPoints: data.minPoints,\n      points: data.points,\n      tree: deserializeTree(data.tree)}),\n    undefined as any,\n  )\n}\n","import {Octree} from 'd3-octree'\nimport {\n  CorePoints,\n  Point,\n} from 'types'\nimport {getNeighbors} from '../get-neighbors'\n\nexport type FindCorePointsArgs = {\n  tree: Octree<Point>;\n  points: Point[];\n  eps: number;\n  minPoints: number;\n}\n\nexport const findCorePoints = (\n  {points, eps, minPoints, tree}: FindCorePointsArgs,\n): CorePoints => {\n  const result: CorePoints = {}\n\n  for (const point of points) {\n    const neighbors = getNeighbors({point, eps, tree})\n    if (neighbors.length < minPoints) continue\n    result[point.id] = {core: point, neighbors}\n  }\n\n  return result\n}\n"],"names":["sqrt","Math","pow2","num","sphereContains","random","floor","s","coord","p1","p2","x","y","z","r","addSimplePoints","multiplySimplePoint","n","p","tree","eps","point","result","visit","node","x0","y0","z0","x1","y1","z1","lower","upper","c","cubeHalf","cubeCenter","cubeCenterMinus","cSphere","otherDimensions","condition1","some","dimension","every","otherD","condition2","cubeOverlapsSphere","length","isLeaf","testPoint","data","push","next","_isPlaceholder","a","_curry1","fn","f1","arguments","apply","this","_curry2","f2","b","_b","_a","d","isNaN","parent","xm","ym","zm","xp","yp","zp","right","bottom","deep","i","j","_root","leaf","_x0","_y0","_z0","_x1","_y1","_z1","_x","call","_y","_z","Array","defaultX","defaultY","defaultZ","nodes","Octree","NaN","addAll","undefined","leaf_copy","copy","names","obj","idx","treeProto","prototype","child","source","target","pop","add","cover","xz","yz","zz","Infinity","t","extent","_","find","radius","x2","y2","z2","q","x3","y3","z3","octs","dx","dy","dz","d2","remove","retainer","previous","removeAll","root","size","callback","visitAfter","Number","isInteger","offset","list","_isInteger","deserializeTree","Object","assign","self","onmessage","postMessage","points","minPoints","neighbors","id","core","findCorePoints"],"sourceRoot":""}